(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>s});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,"* {\n    margin: 0; \n    padding: 0;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh; \n    display: flex; \n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(52, 50, 53);\n    position: relative; \n    overflow: hidden;\n}\n\nbody::after, body::before {\n    content: ''; \n    position: fixed; \n    height: min(100vw, 100vh); \n    width: min(100vw, 100vh); \n    border-radius: 50%;\n    z-index: -1;\n}\n\nbody::after {\n    background-color: #B026FF;\n    top: -25vw;\n    left: -25vw;\n    box-shadow: 0 4px 30px 0 rgba(196, 123, 238, 0.5); \n}\nbody::before {\n    background-color: #1F51FF;\n    bottom: -25vw;\n    right: -25vw; \n    box-shadow: -4px -4px 30px 0 rgba(119, 143, 233, 0.5); \n}\n\n#root {\n    width: 80%; \n    margin: 0 auto;\n    border: 1px solid #b3bdbd; \n    padding: 20px 10px; \n    background-color: white;\n    border-radius: 2px;\n    box-shadow: 0 4px 10px 0 rgba(255,255,255,0.5);\n}\n\nh1 {\n    text-align: center;\n    text-transform: uppercase;\n    padding: 20px 10px; \n}\nform {\n    display: grid; \n    gap: 10px; \n    width: 80%; \n    margin: 0 auto; \n}\nlabel {\n    display: grid; \n}\ninput {\n    border-radius: 3px; \n    outline: none; \n    border: 1px solid #b3bdbd; \n}\nbutton {\n    cursor: pointer;\n    outline:none; \n    border-radius: 3px; \n    border: 2px solid transparent; \n    background-color: #B026FF;\n    color: white; \n    font-weight: bold;\n    text-transform: uppercase;\n}\n\ninput:focus, button:focus {\n    border: 2px solid #1F51FF; \n}\nbutton:hover {\n    background-color: #7c4c97;\n}\n.error {\n    border: 2px solid red; \n    background-color: rgb(243, 191, 191); \n    border-radius: 3px;\n}\n.error:focus-visible {\n    outline: 3px solid red; \n}\n\n@media screen and (min-width: 64em) {\n    form {\n        display: grid; \n        grid-template-columns: 1fr 1fr;\n        grid-auto-rows: 1fr;\n        gap: 20px; \n    }\n\n    label:nth-child(1) {\n        grid-column: 1 / 3; \n    }\n    button {\n        grid-column: 1 / 3; \n        width: 50%; \n        text-align: center;\n        margin: 0 auto; \n    }\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,2BAA2B;IAC3B,8BAA8B;IAC9B,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,iCAAiC;IACjC,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,yBAAyB;IACzB,wBAAwB;IACxB,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,yBAAyB;IACzB,UAAU;IACV,WAAW;IACX,iDAAiD;AACrD;AACA;IACI,yBAAyB;IACzB,aAAa;IACb,YAAY;IACZ,qDAAqD;AACzD;;AAEA;IACI,UAAU;IACV,cAAc;IACd,yBAAyB;IACzB,kBAAkB;IAClB,uBAAuB;IACvB,kBAAkB;IAClB,8CAA8C;AAClD;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,SAAS;IACT,UAAU;IACV,cAAc;AAClB;AACA;IACI,aAAa;AACjB;AACA;IACI,kBAAkB;IAClB,aAAa;IACb,yBAAyB;AAC7B;AACA;IACI,eAAe;IACf,YAAY;IACZ,kBAAkB;IAClB,6BAA6B;IAC7B,yBAAyB;IACzB,YAAY;IACZ,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,qBAAqB;IACrB,oCAAoC;IACpC,kBAAkB;AACtB;AACA;IACI,sBAAsB;AAC1B;;AAEA;IACI;QACI,aAAa;QACb,8BAA8B;QAC9B,mBAAmB;QACnB,SAAS;IACb;;IAEA;QACI,kBAAkB;IACtB;IACA;QACI,kBAAkB;QAClB,UAAU;QACV,kBAAkB;QAClB,cAAc;IAClB;AACJ",sourcesContent:["* {\n    margin: 0; \n    padding: 0;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh; \n    display: flex; \n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(52, 50, 53);\n    position: relative; \n    overflow: hidden;\n}\n\nbody::after, body::before {\n    content: ''; \n    position: fixed; \n    height: min(100vw, 100vh); \n    width: min(100vw, 100vh); \n    border-radius: 50%;\n    z-index: -1;\n}\n\nbody::after {\n    background-color: #B026FF;\n    top: -25vw;\n    left: -25vw;\n    box-shadow: 0 4px 30px 0 rgba(196, 123, 238, 0.5); \n}\nbody::before {\n    background-color: #1F51FF;\n    bottom: -25vw;\n    right: -25vw; \n    box-shadow: -4px -4px 30px 0 rgba(119, 143, 233, 0.5); \n}\n\n#root {\n    width: 80%; \n    margin: 0 auto;\n    border: 1px solid #b3bdbd; \n    padding: 20px 10px; \n    background-color: white;\n    border-radius: 2px;\n    box-shadow: 0 4px 10px 0 rgba(255,255,255,0.5);\n}\n\nh1 {\n    text-align: center;\n    text-transform: uppercase;\n    padding: 20px 10px; \n}\nform {\n    display: grid; \n    gap: 10px; \n    width: 80%; \n    margin: 0 auto; \n}\nlabel {\n    display: grid; \n}\ninput {\n    border-radius: 3px; \n    outline: none; \n    border: 1px solid #b3bdbd; \n}\nbutton {\n    cursor: pointer;\n    outline:none; \n    border-radius: 3px; \n    border: 2px solid transparent; \n    background-color: #B026FF;\n    color: white; \n    font-weight: bold;\n    text-transform: uppercase;\n}\n\ninput:focus, button:focus {\n    border: 2px solid #1F51FF; \n}\nbutton:hover {\n    background-color: #7c4c97;\n}\n.error {\n    border: 2px solid red; \n    background-color: rgb(243, 191, 191); \n    border-radius: 3px;\n}\n.error:focus-visible {\n    outline: 3px solid red; \n}\n\n@media screen and (min-width: 64em) {\n    form {\n        display: grid; \n        grid-template-columns: 1fr 1fr;\n        grid-auto-rows: 1fr;\n        gap: 20px; \n    }\n\n    label:nth-child(1) {\n        grid-column: 1 / 3; \n    }\n    button {\n        grid-column: 1 / 3; \n        width: 50%; \n        text-align: center;\n        margin: 0 auto; \n    }\n}"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);t&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var i={},a=[],s=0;s<n.length;s++){var d=n[s],A=t.base?d[0]+t.base:d[0],c=i[A]||0,l="".concat(A," ").concat(c);i[A]=c+1;var u=r(l),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var b=o(p,t);t.byIndex=s,e.splice(s,0,{identifier:l,updater:b,references:1})}a.push(l)}return a}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=r(i[a]);e[s].references--}for(var d=t(n,o),A=0;A<i.length;A++){var c=r(i[A]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=d}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=r(379),e=r.n(n),t=r(795),o=r.n(t),i=r(569),a=r.n(i),s=r(565),d=r.n(s),A=r(216),c=r.n(A),l=r(589),u=r.n(l),p=r(426),b={};function m(){var n=document.querySelector("#email"),e=!0;return n.classList.remove("error"),n.validity.typeMismatch&&(console.log("value is not valid"),n.setCustomValidity("Please enter a valid email address"),n.reportValidity(),n.classList.add("error"),e=!1),n.validity.valueMissing&&(n.setCustomValidity("This is a required field"),n.reportValidity(),n.classList.add("error"),e=!1),e}function f(){var n=document.querySelector("#country"),e=!0;return n.classList.remove("error"),n.validity.valueMissing&&(n.setCustomValidity("This is a required field"),n.reportValidity(),n.classList.add("error"),e=!1),e}function C(){var n=document.querySelector("#password"),e=document.querySelector("#password-2");return this.classList.remove("error"),this.value.length<this.min&&(this.setCustomValidity("The password needs to be at least ".concat(this.min," characters")),this.reportValidity(),this.classList.add("error")),n.value!=e.value&&""!=n.value&&""!=e.value&&(this.setCustomValidity("The passwords need to match"),this.reportValidity(),this.classList.add("error")),!0}function B(n){var e=document.createElement("label"),r=document.createElement("input");return e.append(n.label[0].toUpperCase()+n.label.slice(1).toLowerCase()+": "),r.type=n.type,r.id=n.id,r.min=n.minLen,r.required=!0,e.append(r),e}function y(n){n.preventDefault();var e=!0;document.querySelector("#form").querySelectorAll("input").forEach((function(n){n.classList.remove("error"),n.validity.valueMissing&&(n.classList.add("error"),n.setCustomValidity("Please enter value"),n.reportValidity(),e=!1)})),C.bind(document.querySelector("#password"))&&C.bind(document.querySelector("#password-2"))&&f()&&m()||(console.log("FAIL"),e=!1),e?alert("Nice one! Form has been submitted."):console.log("form isn't valid")}b.styleTagTransform=u(),b.setAttributes=d(),b.insert=a().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=c(),e()(p.Z,b),p.Z&&p.Z.locals&&p.Z.locals,function(){var n=document.getElementById("root"),e=document.createElement("h1"),r=document.createElement("form"),t=document.createElement("button"),o={email:{label:"email",type:"email",id:"email",minLen:6},postcode:{label:"postcode",type:"text",id:"postcode",minLen:5},country:{label:"country",type:"text",id:"country",minLen:3},password:{label:"password",type:"password",id:"password",minLen:8},"confirm-password":{label:"confirm password",type:"password",id:"password-2",minLen:8}};for(var i in o){var a=B(o[i]);r.append(a)}t.innerText="submit",t.addEventListener("click",y),t.type="submit",r.append(t),r.id="form",r.method="post",e.innerText="Form Validation",n.append(e),n.append(r)}(),document.querySelector("#email").addEventListener("keyup",m),document.querySelector("#country").addEventListener("keyup",f),[document.querySelector("#password"),document.querySelector("#password-2")].forEach((function(n){n.addEventListener("keyup",C.bind(n))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,